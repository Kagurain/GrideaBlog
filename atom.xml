<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hexo.ink</id>
    <title>💤夜杏</title>
    <updated>2020-12-12T14:39:58.702Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hexo.ink"/>
    <link rel="self" href="https://hexo.ink/atom.xml"/>
    <subtitle>你所见即我,好与坏我都不反驳.</subtitle>
    <logo>https://hexo.ink/images/avatar.png</logo>
    <icon>https://hexo.ink/favicon.ico</icon>
    <rights>All rights reserved 2020, 💤夜杏</rights>
    <entry>
        <title type="html"><![CDATA[如何使访客科学的访问你的Github Pages]]></title>
        <id>https://hexo.ink/ghpages-get/</id>
        <link href="https://hexo.ink/ghpages-get/">
        </link>
        <updated>2020-11-28T09:49:27.000Z</updated>
        <summary type="html"><![CDATA[<p>改Hosts × 自己整活 √</p>
]]></summary>
        <content type="html"><![CDATA[<p>改Hosts × 自己整活 √</p>
<!-- more -->
<p>在历史的长河中，对于大部分地区来说Github Pages都是处于502状态的.<br>
主要原因就是 Github提供Pages服务的二级域名github.io 被某些地区运营商指向了127.0.0.1<br>
<strong>我们对此一般通俗称为 污染</strong></p>
<p>本篇文章将会从两个方面入手，详细讲述如何绕过运营商污染，达到二次加速并且顺利访问Github Pages的效果。</p>
<h1 id="域名白嫖法">域名白嫖法</h1>
<p>原理：白嫖一些为Github Pages提供的二级域名，通过其自带的CloudFlare自带节点达到云减速的功能，从而成功访问Pages页面</p>
<p>这里列举两个默认通过CloudFlare托管的域名分发项目<br>
<a href="https://github.com/js-org/js.org">https://github.com/js-org/js.org</a><br>
<a href="https://github.com/js-cool/js.cool">https://github.com/js-cool/js.cool</a></p>
<p>这两个的申请方法几乎一致，网上也有很多申请教程，但是为了方便，<s>我就去扒了一份下来</s>。</p>
<h2 id="申请过程">申请过程</h2>
<p>在做好必要的工作（如准备好Pages环境）之后，您便可以Fork上方列出的任意一个项目到自己的仓库。<br>
完毕，在自己的仓库内打开以<code>USERNAME/js.org</code>命名的仓库，找到<code>cnames_active.js</code>并打开。</p>
<p>现在先想好你要申请的域名<br>
如：<strong>kagura.js.org</strong><br>
现在浏览器中先访问以下，看看是否以使用，使用了就换一个。<br>
进入<code>cnames_active.js</code>，修改</p>
<p>将你的域名按照如下格式按照首字母顺序（一定要按照字母顺序）放入相应的行数的最后一行（是不是最后一行其实问题不大）</p>
<p>就比如kagura.js.org就可以放入k开的最后一行<br>
然后按照这个格式放入相应的位置</p>
<pre><code>&quot;kagura&quot;: &quot;kagurain.github.io/kaguraindex&quot;,
</code></pre>
<p>其中，<code>kagura</code>是你想申请域名的二级<br>
<code>kagurain.github.io/kaguraindex</code>是github托管pages的仓库地址<br>
并且，<strong>一定要记得在后面加一个逗号！</strong> 注意：在后面不要加任何注释！<br>
如果并不需要CF代理流量，就在后面注释//noCF 当然，这违反了我们Pages代理访问的初衷。</p>
<p>之后返回你的<code>USERNAME/js.org</code>，点击<code>Pull requests</code>，向js.org发送一个申请<br>
内容如下：<br>
标题：<strong>你要申请的域名</strong>，如：xhemj.js.org<br>
内容：会自动帮你写好，不用更改</p>
<p>建议直接私有库，因为私有库不会审核pages内容，只会通过，如果不通过那就整个html5up单页就行。<br>
通过后，需要等待30-60分钟让域名适配好之后才能正常访问！</p>
<p>本节内容参考文档：<a href="https://xhemj.js.org/#/p/How-to-Use-Js-org-Domain">Xhemj文档</a></p>
<h1 id="直接加速法">直接加速法</h1>
<p>原理：第三方服务商直接加速Pages内容（虽然也是走自己的域名）</p>
<p>这类厂商有很多，目前我只了解到了<a href="https://www.netlify.com/">Netfily</a><br>
和<a href="https://vercel.com/">Vercel</a> 但是我只用过Vercel，所以本节只讲Vercel。</p>
<p>并且Vercel提供了now.sh的二级域名，在添加域名的时候添加<code>你想要的前缀.now.sh</code>即可</p>
<h2 id="申请过程-2">申请过程</h2>
<p>打开Vercel，使用Github账号登录<br>
<img src="https://7bu.top/2020/08/03/cd8b433b83448.png" alt="image.png" loading="lazy"><br>
<img src="https://7bu.top/2020/08/03/ac33590d3d080.png" alt="image.png" loading="lazy"><br>
新建Project<br>
<img src="https://7bu.top/2020/08/03/6e0ee45f6554e.png" alt="image.png" loading="lazy"><br>
<img src="https://7bu.top/2020/08/03/d567503f63611.png" alt="image.png" loading="lazy"><br>
填写对应的github仓库https地址，单击<code>Continue</code><br>
<img src="https://7bu.top/2020/08/03/3d27e5c63bd3c.png" alt="image.png" loading="lazy"><br>
此处直接点击<code>Continue</code><br>
<img src="https://7bu.top/2020/08/03/927171c5d3909.png" alt="image.png" loading="lazy"><br>
此处可以填写下PROJECT NAME，也可默认，毕竟后面要添加域名。然后点击Deploy，这个<code>Project</code>就建好了</p>
<p>建好之后，你可以将域名直接指向<code>cname.vercel-dns.com</code><br>
在<code>Setting</code> - <code>Domains</code>里面可以设置，默认域名是强制使用Let's encrypt的SSL证书，且无法自行修改。但是相比通过CloudFlare来说，速度快的不只是一点点~</p>
<p><strong>本节基本照搬了<a href="https://colsrch.cn/posts/56951997/">Colsrch大大</a>的内容</strong></p>
<h1 id="尾声">尾声</h1>
<p><s>又水了一篇 好开心</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[0元实现无服务器笨牛网Cloudflare持续开盾]]></title>
        <id>https://hexo.ink/nomoney-crontab/</id>
        <link href="https://hexo.ink/nomoney-crontab/">
        </link>
        <updated>2020-11-21T06:01:50.000Z</updated>
        <summary type="html"><![CDATA[<p>确实有免费的Crontab定时服务这一类云厂商的存在.</p>
]]></summary>
        <content type="html"><![CDATA[<p>确实有免费的Crontab定时服务这一类云厂商的存在.</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>如题，如何实现<strong>0元实现无服务器笨牛网Cloudflare持续开盾</strong>，是一个问题。<br>
实现这类功能很简单，我们只需要一个定时任务即可。<br>
笨牛网的自动开盾功能用到了Crontab中的定时任务。我们换个角度思考，既然没有免费Linux服务器供我们创建监控，那么我们可以找提供Crontab定时服务的云厂商。</p>
<p>（本文章不含任何恰饭 软广链接 请放心使用。）</p>
<h1 id="实施">实施</h1>
<p>有这类服务提供的厂商我尝试找了找<br>
我找到了 <a href="https://clock.sh/" target="_blank">Clock.sh</a> 和 <a href="https://mrtask.tools/" target="_blank">Task君</a></p>
<p>既然是要持续开盾，那么我们只需要创建一直访问笨牛开盾API的链接即可。<br>
Closk.sh 目前支持 Python 和 Node 脚本<br>
而 Task君则支持PHP LinuxSH dotNet Core 3.X 和 Python<br>
我只会整PHP和LinuxSH，所以本文只讲Task君。其实任何命令都是一样的实现方式，只不过编写的代码可能会随着环境的变化而不同罢了。</p>
<p>Task君对于资源限制的要求完全可以满足我们的需求<br>
<img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/L7HzfAdSlj4G2c9.png" alt="image.png" loading="lazy"></p>
<p>登录 注册 创建代码 创建任务 查看执行日志</p>
<p>以下是持续访问开盾API链接的终端代码 思路上是使用Curl对链接进行访问而输出访问结果<br>
对笨牛官方脚本深层<s>抄袭</s>改包<s>乱整</s>优化完成<br>
<strong>输出1的时候即为成功 输出访问频繁不用多加理会</strong></p>
<pre><code class="language-bash"> #!/bin/sh

echo -e &quot;开启防御规则&quot;  
url=&quot;https://cdn.bnxb.com/api/?token=KbbocuJMNBUy9dU6giBg%2FTJAV2TxOU3iavncBL%2F64EnKkScnkvCkS37ayfH1wdJpxsjioocn6Q&amp;status=on&quot; 
cResult=$(curl --insecure -X GET $url )
echo $cResult
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/khLIxVlbEO87rnK.png" alt="image.png" loading="lazy"></figure>
<p>然后创建监控任务</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/sKBYZtfXmVo1JGW.png" alt="image.png" loading="lazy"></figure>
<p>不过在运行的实际过程中他是一直显示执行失败的，我不知道是Task君对于失败的进程是如何做判断的，但是链接是正常访问，盾也是能开的。在对脚本修改了几十万次的时候我终于想开了，为什么能用了还要能执迷不悟呢。所以我就这样顺其自然的屈服了。<br>
<img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/ndQXS26WIftO1To.png" alt="image.png" loading="lazy"><br>
<img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/a9L6UAjhYzKy35Q.png" alt="image.png" loading="lazy"><br>
<img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/s47kpUjmQfl5vI9.png" alt="image.png" loading="lazy"></p>
<h1 id="结语">结语</h1>
<p>就算没有持续开盾的需求的话，其他一般Crontab操作也可能对你的工作有很大帮助。这类厂商不仅帮助我们不用免于购买服务器的烦恼，而且还可以运行Linux或其他代码相关实例操作。综上所述，这未免不可是以后一个比较大的发展方向。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[11.14 开站小解谜 WriteUp]]></title>
        <id>https://hexo.ink/1114-kai-zhan-xiao-jie-mi-writeups/</id>
        <link href="https://hexo.ink/1114-kai-zhan-xiao-jie-mi-writeups/">
        </link>
        <updated>2020-11-20T13:04:28.000Z</updated>
        <summary type="html"><![CDATA[<p>唐突了，在本站还未有人气之前还是先不要搞大活动了。没精力，也没有能力。</p>
]]></summary>
        <content type="html"><![CDATA[<p>唐突了，在本站还未有人气之前还是先不要搞大活动了。没精力，也没有能力。</p>
<!-- more -->
<h1 id="0x01-mixed-content-整洁">0x01 - Mixed Content &amp; 整洁</h1>
<p>因为在 HTML 中， MixedContent 为了美观显示是不会在网页上显示的。只会在控制台中显示<br>
所以这提示了我们要去翻 <strong>Console.log</strong></p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/JIdjtSOgn2pGzua.png" alt="Console" loading="lazy"></figure>
<p>眼熟的小伙伴可能会看得出这是什么加密，但是有的小伙伴看不出。这是<b><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank">与佛论禅</a></b>加密</p>
<p>但是，当我们放上去解密的时候，却会出现这个问题</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/gdmA7RHibGkQ8Cv.png" alt="太深奥了，参悟不出佛经的真意……" loading="lazy"></figure>
<p>这是因为这个加密通常有个为<strong>如是我闻</strong>和<strong>佛曰</strong>的头<br>
我们把它都试试就能得出结果</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/20201121231322.png" alt="第一个线索" loading="lazy"></figure>
<h1 id="002-2300663621">0*02 - 2300663621</h1>
<p>首先，把这玩意百度是没有结果的。<br>
<strong>塞进网站路径也是一样</strong><br>
<img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/YMx3FQVUeut6OCk.png" alt="image.png" loading="lazy"></p>
<p><strong>这时我们就得知道了，一般来说十位数都是小学生的QQ号</strong><br>
你还真没猜错 这就是QQ号。</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/ksIu9OHSgGpWdPz.png" alt="你会倒过来念吗" loading="lazy"></figure>
<p>他的昵称提示了我们是猪的才倒过来念。所以我们倒过来写QQ</p>
<p>于是这一关的解法我是这样想的</p>
<pre><code>https://hexo.ink/ + 1263660032 = False
https://hexo.ink/ + 1263660032 + 开始谜题地址栏内的riddle = True
</code></pre>
<h1 id="003-不在任何地方">0*03 - 不在任何地方</h1>
<figure data-type="image" tabindex="5"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/rjUkSWwZJ5XslVz.png" alt="那是在哪 草了" loading="lazy"></figure>
<p>如果你能一眼看到下面的评论区的话那你还没走错。</p>
<figure data-type="image" tabindex="6"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/as2wquRDXATQjYc.png" alt="image.png" loading="lazy"></figure>
<p>首先 bilibili1024havefun是哔哩哔哩1024程序员节CTF竞赛第六题中的内容<br>
而 ↑⚪是暗指了右边的顶部返回按钮<br>
在网页源码中head头部一眼就可以看得出来 TopButton.js的调用路径<br>
我们跟随这个调用库会找得到名为Kagurain的Github用户</p>
<p>在他的README中，有这样一个地方</p>
<figure data-type="image" tabindex="7"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/ws5LecrlD4AoxHF.png" alt="image.png" loading="lazy"></figure>
<p>但是你要是勇往直前划到最下，那你就有可能失去了下一关的入口</p>
<figure data-type="image" tabindex="8"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/nedO2sNf6HBp3AX.png" alt="image.png" loading="lazy"></figure>
<h1 id="004-runoob-1e11">0*04 - Runoob 1&amp;e1&amp;1</h1>
<p>众多知识分子应该都知道runoob.com这个网站 这里就是引导了我们访问它</p>
<p>首页进去 1&amp;e1&amp;1指的是第一个栏目 第一个实例中的第一行代码</p>
<figure data-type="image" tabindex="9"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/9VGToRQJWyezps1.png" alt="image.png" loading="lazy"></figure>
<p><strong>尝试拼装他到博客内访问</strong></p>
<figure data-type="image" tabindex="10"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/NYKZfcoF5P9wWB7.png" alt="image.png" loading="lazy"></figure>
<p>无解。当你以为是拼错的时候你会发现怎么拼都是错的</p>
<h1 id="005-你的方向错了">0*05 - 你的方向错了</h1>
<p>都说了嘛，脑洞题<br>
脑洞大点的你不会联想一下吗</p>
<p>我们游戏的全程外站链接一共有三个<br>
分别是 runoob.com github.com 和作为图床的sm.ms<br>
但是runoob.com已经被使用了<br>
<strong>所以你就组合一下github.com和sm.ms嘛！</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/VJWALECHaG1fePO.png" alt="image.png" loading="lazy"><br>
虽然还是方向错了，但是我们发现这张图片加载很慢，一看原来是本地加载的，那我们就下载到本地</p>
<h1 id="006-你应该是小学生吧">0*06 - 你应该是小学生吧</h1>
<p>这把啊，这把是隐写<br>
把jpg后缀修改为zip 解压要密码<br>
<img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/aRHBy5VYOMWL3Qm.png" alt="image.png" loading="lazy"></p>
<p>直接回到开始页面，复制link下来<br>
<strong>11-14riddle</strong>即为解压密码</p>
<figure data-type="image" tabindex="11"><img src="https://cdn.jsdelivr.net/gh/Kagurain/StaticLib@main/Pics/20201121232121.png" alt="image.png" loading="lazy"></figure>
<h1 id="007-十二点是赛场停电的时间">0*07 - 十二点是赛场停电的时间</h1>
<p>这句话实际上是模仿了一个科普节目制作团队<strong>回形针</strong>在100期时做的一个解谜内的一个线索<br>
如果你加到了这个 回形针粉色小针交流群 你可以看到过我曾经发过一张相关截图<br>
<strong>里面包含了一个名为 “Base64 在线编码解码 | Base64 加密解密 - Base64.us”的标签页</strong></p>
<p>还需要我怎么说吗？</p>
<p><strong>原本是打算有人能够做出这个解谜就写一份新年解谜的，只有通过这个解谜才能加入，但很可惜的是没有人<s>参加</s>解谜，所以打算以后人流量大起来再做。那就这样了~</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://hexo.ink/hello-gridea/</id>
        <link href="https://hexo.ink/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>